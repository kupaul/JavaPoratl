
/*
 * 
 */

package com.example.search.policysearchportalapi;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.3.0
 * Tue May 12 17:36:40 IST 2020
 * Generated source version: 2.3.0
 * 
 */


@WebServiceClient(name = "PolicySearchPortalAPI", 
                  wsdlLocation = "http://localhost:8180/pc/ws/search/PolicySearchPortalAPI?WSDL",
                  targetNamespace = "http://example.com/search/PolicySearchPortalAPI") 
public class PolicySearchPortalAPI extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://example.com/search/PolicySearchPortalAPI", "PolicySearchPortalAPI");
    public final static QName PolicySearchPortalAPISoap12Port = new QName("http://example.com/search/PolicySearchPortalAPI", "PolicySearchPortalAPISoap12Port");
    public final static QName PolicySearchPortalAPISoap11Port = new QName("http://example.com/search/PolicySearchPortalAPI", "PolicySearchPortalAPISoap11Port");
    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8180/pc/ws/search/PolicySearchPortalAPI?WSDL");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from http://localhost:8180/pc/ws/search/PolicySearchPortalAPI?WSDL");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public PolicySearchPortalAPI(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public PolicySearchPortalAPI(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public PolicySearchPortalAPI() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public PolicySearchPortalAPI(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }
    public PolicySearchPortalAPI(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public PolicySearchPortalAPI(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns PolicySearchPortalAPIPortType
     */
    @WebEndpoint(name = "PolicySearchPortalAPISoap12Port")
    public PolicySearchPortalAPIPortType getPolicySearchPortalAPISoap12Port() {
        return super.getPort(PolicySearchPortalAPISoap12Port, PolicySearchPortalAPIPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PolicySearchPortalAPIPortType
     */
    @WebEndpoint(name = "PolicySearchPortalAPISoap12Port")
    public PolicySearchPortalAPIPortType getPolicySearchPortalAPISoap12Port(WebServiceFeature... features) {
        return super.getPort(PolicySearchPortalAPISoap12Port, PolicySearchPortalAPIPortType.class, features);
    }
    /**
     * 
     * @return
     *     returns PolicySearchPortalAPIPortType
     */
    @WebEndpoint(name = "PolicySearchPortalAPISoap11Port")
    public PolicySearchPortalAPIPortType getPolicySearchPortalAPISoap11Port() {
        return super.getPort(PolicySearchPortalAPISoap11Port, PolicySearchPortalAPIPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PolicySearchPortalAPIPortType
     */
    @WebEndpoint(name = "PolicySearchPortalAPISoap11Port")
    public PolicySearchPortalAPIPortType getPolicySearchPortalAPISoap11Port(WebServiceFeature... features) {
        return super.getPort(PolicySearchPortalAPISoap11Port, PolicySearchPortalAPIPortType.class, features);
    }

}
